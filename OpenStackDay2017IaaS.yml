heat_template_version: 2013-05-23
# Author: Graham Land
# Date: 25/09/2017
# Purpose: Deploy Phaser-Quest on Fujitsu's K5 IaaS Platform
#
# This is a two tier deployment with a nginx webproxy server and a nodejs application server
# The application is PhaserQuest which is based on Phaser.io the open source javascript game framework
#
# Twitter: @allthingsclowd
# Blog: https://allthingscloud.eu
#
# A big thanks to Jerome Renaux @ https://github.com/Jerenaux for the demonstration application. I hope
# everyone agrees that it's better than a wordpress demo!

description: Deploy a 2 Tier Phaser-Quest MMO Game on OpenStack using HEAT

# Input parameters
parameters:
  default_security_group:
    type: string
    label: Project Default Security Group
    description: Project Default Security Group
    default: "8cdd3875-4152-4f56-a3b1-01460ff952c7"
  external_router:
    type: string
    label: Phaser-Quest Router Used to Provide External Access to VMs
    description: Phaser-Quest Router Used to Provide External Access to VMs
    default: "e8271292-9919-49f5-a9cd-97c27ef67ed4"
  key_pair:
    type: string
    label: Key pair name
    description: Name of key-pair to be used for compute instance
    default: "OpenStackDay2017"
  public_net:
    type: string
    label: external network ID
    description: Public network
    default: "73598426-3678-4eb6-8131-9007770d3ccd"
  my_ip:
    type: string
    label: External management IP CIDR
    description: IP address allowed for access to jump server on SSH
    default: "165.120.203.180/32" # <--work home--> 165.120.203.180/32"
  ubuntu_image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: "Ubuntu Server 14.04 LTS (English) 02"
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: "S-1"
  az:
    type: string
    label: Availability Zone
    description: Region AZ to use
    default: "de-1a"
  az_dns:
    type: string
    label: Availability Zone DNS Servers
    description: Availability Zone DNS Servers to use
    default: ["185.149.225.9", "185.149.225.10"]





# K5 Infrastructure resources to be built
resources:

  # Create a private network in availability zone
  phaser_net:
    type: OS::Neutron::Net
    properties:
      availability_zone: { get_param: az }
      name: "phaser_net"

  # Create a new subnet on the private network
  phaser_subnet:
    type: OS::Neutron::Subnet
    depends_on: phaser_net
    properties:
      availability_zone: { get_param: az }
      name: "phaser_subnet"
      network_id: { get_resource: phaser_net }
      cidr: "192.168.2.0/24"
      gateway_ip: "192.168.2.254"
      allocation_pools:
        - start: "192.168.2.100"
          end: "192.168.2.150"
      dns_nameservers: { get_param: az_dns }
  
  # Connect an interface on the web tier network's subnet to the router
  az_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [phaser_subnet]
    properties:
      router_id: { get_param: external_router }
      subnet_id: { get_resource: phaser_subnet } 

  # Create jump server security group
  jump_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Phaser stack jump server security group
      name: Phaser-jumpbox
      rules:
        # allow inbound ssh from my ip
        - remote_ip_prefix: { get_param: my_ip }
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: { get_param: my_ip }
          protocol: icmp
  
  # Create app and proxy server security group
  phaser_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Phaser stack network connector security group
      name: Phaser-game
      rules:
        # allow http traffic 
        - remote_ip_prefix: "0.0.0.0/0"
          protocol: tcp
          port_range_min: 80
          port_range_max: 80

##############################################################################

  # AZ 1 Load Balancer
  Phaser_LBaaS:
    type: FCX::ExpandableLoadBalancer::LoadBalancer
    depends_on: [ nginx1-server ]
    properties:
      Subnets: [{get_resource: phaser_subnet}]
      Instances: [{get_resource: nginx1-server}]
      Listeners:
      - {LoadBalancerPort: '80',
         InstancePort: '80',
         Protocol: 'HTTP',
         InstanceProtocol: 'HTTP' }
      LBCookieStickinessPolicies:
      - {CookieExpirationPeriod: '60',
         PolicyName: 'LB-Sticky'}
      HealthCheck: {Target: 'HTTP:80/', 
                    HealthyThreshold: '3',
                    UnhealthyThreshold: '5',
                    Interval: '30',
                    Timeout: '5'}
      Version: 2014-09-30
      Scheme: public
      LoadBalancerName: Phaser-LBaaS
      SecurityGroups: [ {get_resource: phaser_security_group}, { get_param: default_security_group } ]

################### JumpBox  - AZ 1 ######################################################################

  # Create a new port for the server interface, assign an ip address and security group    
  jump-server-port:
    type: OS::Neutron::Port
    depends_on: [ jump_security_group ]
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: phaser_net }
      security_groups: [{ get_resource: jump_security_group }, { get_param: default_security_group }]

  # Allocate a floating/global ip address
  jump-server-floating-ip:
    type: OS::Neutron::FloatingIP
    properties:
      availability_zone: { get_param: az }
      floating_network_id: { get_param: public_net }

  # Assign a floating/global ip address to the fixed server ip address
  jump-server-floating-ip-association:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: jump-server-floating-ip
    properties:
      floatingip_id: { get_resource: jump-server-floating-ip }
      port_id: { get_resource: jump-server-port }

  # Create a system volume for use with the server
  jump-sys-vol:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name: "jump-box"
      size: 3
      volume_type: "M1"
      image : { get_param: ubuntu_image }

  # Build a server using the system volume defined above
  jump-server:
    type: OS::Nova::Server
    # depends_on: [ nginx1-server, phaser-app1-server, jump-server-port ]
    properties:
      key_name: { get_param: key_pair }
      image: { get_param: ubuntu_image }
      flavor: { get_param: flavor }
      metadata: { "fcx.autofailover": True }
      block_device_mapping: [{"volume_size": "3", "volume_id": {get_resource: jump-sys-vol}, "delete_on_termination": True, "device_name": "/dev/vda"}]
      name: "phaser-jumpbox-az"
      networks:
        - port: { get_resource: jump-server-port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
              - path: /home/ubuntu/phaser.pem
                permissions: '0600'
                owner: 'ubuntu:ubuntu'
                content: |
                  -----BEGIN RSA PRIVATE KEY-----
                  MIIEoQIBAAKCAQEA4MBSCRr6XOdLBsVSF3x3X/Y+jSoCP4walw5x/8A9g+kF9vuC
                  lBU32TlQD/k1B4mxODhxTi1pzmw7Se/ccu3dlGivRgKuQzplVMeCJKAd15MxTr8i
                  9ZKlwEj02xxBIzl58pVlHGIGVLwzxyfKtzOSFkEVdUYmJUvifoTYM5R5aWPI2Rhh
                  hvkxtmz+WHC67dePcrzAaE0KizRWF4xRP/ZFUXUwcB/Z2fbF5RPocARBjbZgKDb4
                  ufC0v9eKdn6mDQDu/Vq7VY8058efitNcfqxhx5d+t0EpwZCha6J7/3KJa9rXABzH
                  WrVt1Tk/1F/Z8h/VNyo0k1KLMlBlsHZH5BSMgQIBIwKCAQBmvlFjP4hk/AUKaNUS
                  DQNfEXuuPxb4eo/QBpqDixTOlmkgcvndS4c+ux1JIXdT5yxxeONW8DBeXVzumYlZ
                  HEgJVG1h1Vb6KVLk7X1SklbI8tS2SL+GNGkHcc8FFDsIydFY89ZzYALk6FIvKCIn
                  3Q+VJREfqwofraleaJ1ZaHIESgPzzPHoVc9//51rtqc2pjmmCu3BsJkR8isAiiyL
                  LiegC9FIcXXGcgeMWqFBPqHUELcZXTaUYIu/Ie8FBvDXiZMWOQFbemQJczF8BS3j
                  YFoGXoY6c8y052ekh8FGziJgy35gHf3ygUMnaVLirJpG0i3SH3M0ZHkVeP8fcw5x
                  uFFLAoGBAPqx+ubMIM/tH4X+zUD7mgaX8+EByd8IUKLwVTXGS7XzuAnkVTBr58bC
                  AOCtKX9oLcR40J3Y5N0rzZRmzs7+YNXnK2VQTYbZFPWfD6giKuy+JFc+5Ej+Men/
                  dOviiF74V8dsHtSwjX/CStzLYdEy6+xyA3Q0USPeVAQKvXDlOe27AoGBAOWBzSmO
                  nKvhTk/+A+wqseq/kPdO0NyrofUWCNoJNZivo0y9UnfL9Y6gDMcEIcAlpAsn6nN8
                  eKXh77s0sKg3IydVkqMNJfM6Bq2seF/7HrAbhGHYf5D3pIS0RJlSBz8/xeshvFcn
                  rSsst/25JHdESCSJgfRcZZ51A7OQ7SdmF2zzAoGBAKS+Gegfvcp3QJnh9Jhq0u5j
                  2scPzc0UF7uH/Xsb6Jwj0LYLE2j2c70gZvoLZGmq3D9IFA/07irw5i5SMCGf2Twb
                  kYu4bXXfHGbk3mcsZVm+x2yIaiFWldRIyS1LuLNv/ytHDPIq4KRpvCqxiWw3Z9Xk
                  he1G8334gFptdSzuZ+VdAoGAVT7XLLFQIpWDfMwQFeP48MrPcczRPAU8J9T7+Tae
                  4PDHoCkQAJw2orB5xkNc/jnd2EIGn+xnU45u/GQHGeiYB0urfmP4JyQuXcO3rp8a
                  BuWmMvikaQuGP+svbCXILW91ZfaWaYPD+hfskXCnJPway74Lsoi4B6fOLMDNHUMt
                  RbkCgYAi4KlL+fT5xJ9X3EbYxQ4P2TAEUAwKh7yvpoFVH/OuKZedIi2sHNOkb895
                  qlcmVtbD96T0m4sZ2UVk0oDURsjp7tK8pIdCqXkxx+Y/cSEc+1R/3J0GcUHt2cbc
                  YmDPfr1iqizT0n9em0B51SQb3UH88Egf56GHXiVaEZYc7/o0DQ==
                  -----END RSA PRIVATE KEY-----                
            runcmd:
              - echo $jump_server_ip `hostname` >> /etc/hosts
          params:
            $jump_server_ip: { get_attr: [ jump-server-port, fixed_ips, 0, ip_address]}
            message: "Installation of JumpBox Complete"

#########################################################################################################

################### Phaser Nginx 1 - Net 1  - AZ 1 ##############################################################################

  # Create a new port for the server interface, assign an ip address and security group    
  nginx1-server-port:
    type: OS::Neutron::Port
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: phaser_net }
      security_groups: [{ get_param: default_security_group }]

  # Create a system volume for use with the server
  nginx1-sys-vol:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name: "nginx1-boot-vol"
      size: 30
      volume_type: "M1"
      image : { get_param: ubuntu_image }

  # Build a server using the system volume defined above
  nginx1-server:
    type: OS::Nova::Server
    depends_on: [ phaser-app1-server ]
    properties:
      key_name: { get_param: key_pair }
      image: { get_param: ubuntu_image }
      flavor: { get_param: flavor }
      metadata: { "fcx.autofailover": True }
      block_device_mapping: [{"volume_size": "30", "volume_id": {get_resource: nginx1-sys-vol}, "delete_on_termination": True, "device_name": "/dev/vda"}]
      name: "nginx1_az"
      networks:
        - port: { get_resource: nginx1-server-port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            apt_update: true
            write_files:
              - path: /home/ubuntu/phaser-nginx-default
                content: |
                  server {
                          listen 80;

                          server_name $nginx1_ip;

                          location / {
                              proxy_pass http://$phaser_app1_ip:61337;
                              proxy_http_version 1.1;
                              proxy_set_header Upgrade $http_upgrade;
                              proxy_set_header Connection 'upgrade';
                              proxy_set_header Host $host;
                              proxy_cache_bypass $http_upgrade;}}                         
            runcmd:
              - echo $nginx1_ip `hostname` >> /etc/hosts
              - sudo apt-get install -y nginx
              - cp /home/ubuntu/phaser-nginx-default /etc/nginx/sites-available/default
              - service nginx restart
          params:
            $phaser_app1_ip: { get_attr: [ phaser-app1-server, first_address ] }
            $nginx1_ip: { get_attr: [nginx1-server-port, fixed_ips, 0, ip_address]}
            message: "Installation of Web Proxy Tier Complete"

###########################################################################################################        

################### Phaser App 1 - Net 1  - AZ 1 ##############################################################################

  # Create a new port for the server interface, assign an ip address and security group    
  phaser-app1-server-port:
    type: OS::Neutron::Port
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: phaser_net }
      security_groups: [{ get_param: default_security_group }]

  # Create a system volume for use with the server
  phaser-app1-sys-vol:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name: "phaser-app1-boot-vol"
      size: 30
      volume_type: "M1"
      image : { get_param: ubuntu_image }

  # Build a server using the system volume defined above
  phaser-app1-server:
    type: OS::Nova::Server
    depends_on: [ phaser-app1-server-port ]
    properties:
      key_name: { get_param: key_pair }
      image: { get_param: ubuntu_image }
      metadata: { "fcx.autofailover": True }
      flavor: { get_param: flavor }
      block_device_mapping: [{"volume_size": "30", "volume_id": {get_resource: phaser-app1-sys-vol}, "delete_on_termination": True, "device_name": "/dev/vda"}]
      name: "phaser-app1_az"
      networks:
        - port: { get_resource: phaser-app1-server-port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            apt_update: true
            runcmd:
              # Config hostname resolution
              - echo $app_ip `hostname` >> /etc/hosts
              # Install MongoDB
              - sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
              - echo "deb http://repo.mongodb.org/apt/ubuntu "$(lsb_release -sc)"/mongodb-org/3.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list
              - sudo apt-get update
              - sudo apt-get install -y mongodb-org
              # Install NodeJS & NPM
              - curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
              - sudo apt-get install -y nodejs git
              # Download the Phaser Quest Client/Server files from github.com
              - mkdir -p /var/phaser/node        
              - git clone https://github.com/Jerenaux/phaserquest.git /var/phaser/node
              - cd /var/phaser/node
              - git reset --hard c1462ca
              - npm install
              - node server.js -p 61337 &              
          params:
            $app_ip: { get_attr: [phaser-app1-server-port, fixed_ips, 0, ip_address]}
            message: "Installation of Phaser Quest Application Tier Complete"

########################################################################################################### 
